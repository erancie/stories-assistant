//shout out to Darwin Tech (https://www.youtube.com/watch?v=U2g--_TDYj4)
//and Mohan Raj for inspo with this component (https://www.section.io/engineering-education/speech-recognition-in-javascript/)
import React, { useEffect, useState, useRef } from 'react'
import {} from 'dotenv/config';
import axios from 'axios';

//Speech Rec.
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
const recognition = new SpeechRecognition()
recognition.continuous = true
recognition.interimResults = true
recognition.lang = 'en-US'

export default function App() {
  //state
  const [isListening, setIsListening ] = useState(false)
  const [text, setText ] = useState('')
  const [transcript, setTranscript ] = useState('')
  const [history, setHistory] = useState([]);
  const [position, setPosition] = useState(-1);
  const typingTimeoutRef = useRef(null);



  //effects
  useEffect(()=>{
    //recognition
    recognition.onstart = () => console.log('recognition.onstart()')
    //onresult sets transcript while listening - before onend  
    recognition.onresult = event => { 
      const transcript = Array.from(event.results)
      .map(result => result[0])
      .map(result => result.transcript)
      .join('')
      setTranscript(' '+transcript);
      // setText(curr => curr + transcript);
      recognition.onerror = event => console.log(event.error) 
    }
  }, [])

  useEffect(()=>{
    const handleListen = () => {
      if(isListening){                                   
        recognition.start(); 
        recognition.onend = () => {                       
          recognition.start(); 
        }
      }else {
        recognition.stop();  
        //onend when stopped adds transcript from listening to text
        recognition.onend = () => {
          setText((currText) => {
            if (currText) {
              setHistory((prevHistory) => [...prevHistory, currText]);
              setPosition((prevPosition) => prevPosition + 1);
            }
            return currText + '' + transcript;
          });
          setTranscript('');
        }
      }
    }
    handleListen(); console.log('handleListen()');
  }, [isListening])



  async function sendPrompt() {
    try {
      const requestBody = { text }; 
      let postURL ='https://us-central1-quickstories.cloudfunctions.net/chatgpt' 
      if (process.env.NODE_ENV === 'development') {  //functions emulator endpoint with client development
      postURL ='http://127.0.0.1:5001/quickstories/us-central1/chatgpt' 
      }
      // console.log('process.env.NODE_ENV-------'+process.env.NODE_ENV) 
      // console.log('postURL:' + postURL)
      let response = await axios.post( postURL, requestBody );
      const result = response.data.result;
      // const engine = response.data.engine;
      // console.log('engine: '+engine)

      setText((prev) => {
        setHistory((prevHistory) => [...prevHistory, prev]);
        setPosition((prevPosition) => prevPosition + 1);
        return prev + '' + result;
      });
    } 
    catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    clearTimeout(typingTimeoutRef.current);
    typingTimeoutRef.current = setTimeout(() => {
      if (text) {
        setHistory((prevHistory) => [...prevHistory, text]);
        setPosition((prevPosition) => prevPosition + 1);
      }
    }, 1000); // Adjust the delay time as needed (in milliseconds)
  }, [text]);
  
  const undo = () => {
    if (position > 0) {
      setPosition((prevPosition) => prevPosition - 1);
      setText(history[position - 1]);
    }
  };

  const redo = () => {
    if (position < history.length - 1) {
      setPosition((prevPosition) => prevPosition + 1);
      setText(history[position + 1]);
    }
  };

  const handleTextChange = e => setText(e.target.value)
  

  return (
    <div className="App">

      {/* Header */}
      <div className='header row mx-2 my-4'>
        
        <div className=' col-8 '>
          <h1 className='title '>
            <span className='clever'><span className='c'>C</span>lever</span> 
            <span className='clive'> <span className='c2'>C</span>live</span>
          </h1>
          <h1 className='sub-title'>Speak or Type to have Clive complete your sentence.</h1>
        </div>

        <div className='col-4 '>

        <svg viewBox="0 0 1312 1221" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M75.6544 758.458C111.463 734.886 140.529 719.892 193.703 711.795C226.505 715.753 253.681 722.368 283.2 737.108C304.715 747.851 329.177 775.407 344.354 794.213C375.111 832.324 387.582 876.456 399.486 922.92C412.394 973.306 418.755 1025.42 408.596 1077.12C402.475 1108.27 391.518 1127.27 372.392 1151.39C331.395 1203.08 253.013 1207.89 191.87 1206.09C138.567 1204.52 105.657 1178.76 70.3093 1141.94C50.2574 1121.05 32.2808 1078.94 23.0999 1052.02C8.80116 1010.08 -4.09553 966.85 1.31893 921.981C8.82537 859.775 19.1528 795.651 75.6544 758.458Z" fill="#7CBBF5"/>
          <path d="M160.342 753.079C161.612 751.933 162.913 750.835 164.249 749.787C163.449 750.997 162.094 752.087 160.342 753.079C118.728 790.658 112.115 879.873 115.134 930.331C119.12 996.956 163.838 1071.42 181.161 1095.12C198.484 1118.82 237.173 1144.57 237.173 1144.57C237.173 1144.57 247.329 1153.65 262.837 1164.28C239.039 1181.01 183.24 1165.22 158.464 1157.4C52.7538 1124.01 29.7391 958.607 29.7391 958.607C29.7391 958.607 20.3707 836.86 57.6005 807.648C74.5753 794.329 103.368 770.892 124.013 763.507C131.908 760.683 151.343 758.177 160.342 753.079Z" fill="#A2D2FF"/>
          <path d="M314.194 839.333C303.59 828.852 234.185 773.825 234.455 780.771C272.182 821.194 278.986 824.725 285.674 835.892C300.112 859.994 315.425 879.766 330.022 909.473C348.922 950.872 362.911 983.571 360.352 1017.8C360.085 1046.13 356.614 1073.94 353.191 1102.31C351.685 1114.79 346.039 1141.33 361.189 1115.96C390.96 1066.1 395.811 999.111 375.479 944.251C357.805 909.018 340.775 860.465 314.194 839.333Z" fill="#3B97EC"/>
          <path d="M700.61 182.568C694.314 190.422 609.24 298.508 639.479 298.508C665.361 318.481 716.794 326.633 745.838 340.508C753.438 344.139 777.742 364.442 787.267 355.937C791.729 351.952 791.498 342.464 793.677 337.328C802.222 317.193 806.947 290.777 812.908 269.488L813.483 267.743C825.256 232.026 840.338 186.272 865.852 137.812C868.575 120.347 951.546 0.986957 927.699 0.365854C917.256 -1.93669 899.761 7.25934 894.105 10.377C866.762 25.4481 846.251 44.7645 822.167 64.7902C778.455 101.138 736.311 138.028 700.61 182.568Z" fill="#B0CAE2"/>
          <path d="M865.852 137.587C868.575 120.103 951.546 0.621738 927.699 0C916.501 16.6386 891.303 52.8306 880.094 64.4903C868.886 76.15 836.806 136.103 822.167 164.623C803.87 201.568 764.599 269.397 764.599 284.109C764.599 284.109 683.79 253.839 654.72 245.873C637.275 272.989 624.811 298.448 639.479 298.448C665.361 318.44 716.794 326.601 745.838 340.49C753.438 344.124 777.742 364.448 787.267 355.934C791.729 351.946 791.498 342.448 793.677 337.307C802.222 317.151 806.947 290.709 812.908 269.397L813.483 267.65C825.256 231.897 840.338 186.096 865.852 137.587Z" fill="#7CBBF5"/>
          <path d="M358.187 873.673C358.629 873.575 359.052 873.49 359.454 873.419C368.193 871.738 379.067 871.17 381.857 877.712C391.802 901.029 401.826 924.168 405.964 949.767C407.248 957.712 412.099 972.198 401.874 975.777C395.621 977.966 389.163 979.685 382.83 981.632C361.723 988.121 337.142 1002.73 314.586 1000.01C302.3 995.224 297.904 985.472 291.248 970.707L291.247 970.706C284.591 955.94 282.255 935.347 290.859 909.887C294.553 895.846 297.123 895.947 308.909 892.323C320.275 888.829 346.226 876.338 358.187 873.673Z" fill="#FFEACB"/>
          <path d="M487.46 303.827C503.755 291.594 525.441 277.963 587.973 260.712C650.506 243.46 680.734 262.696 719.336 282.013C810.015 327.393 872.975 409.409 919.826 499.585C954.622 566.558 966.802 646.465 981.515 720.097C992.993 777.539 1000.2 865.425 974.906 920.518C922.918 1033.77 787.656 1096.93 666.459 1096.93C589.05 1096.93 511.427 1115.04 439.775 1074.88C379.561 1041.13 328.12 995.8 311.501 926.889C282.957 834.282 279.256 840.147 296.005 672.7C295.575 653.4 315.9 570.858 339.082 499.585C356.827 445.03 406.091 372.878 430.023 351.732C453.955 330.587 471.164 316.059 487.46 303.827Z" fill="#D17DEF"/>
          <path d="M666.452 1096.93C589.041 1096.93 511.416 1115.04 439.763 1074.88C411.297 1058.92 384.792 1040.38 363 1017.98C410.865 1035.43 519.996 1068.4 573.605 1060.74C640.616 1051.15 894.299 979.874 894.299 926.889C894.299 873.904 946.95 687.072 879.94 562.517C812.929 437.963 774.637 363.965 707.626 322.989C654.018 290.209 589.402 282.013 563.795 282.013L511.381 288.585C527.166 280.294 550.062 271.168 587.964 260.712C650.498 243.46 680.727 262.696 719.329 282.013C810.011 327.393 872.973 409.409 919.824 499.585C954.621 566.558 966.801 646.465 981.515 720.097C992.993 777.539 1000.2 865.425 974.905 920.518C922.917 1033.77 787.651 1096.93 666.452 1096.93Z" fill="#B861D7"/>
          <path d="M899.694 896.139C900.138 896.231 900.558 896.327 900.954 896.428C909.611 898.487 919.758 902.438 919.613 909.549C919.096 934.892 918.725 960.107 911.977 985.145C909.883 992.916 908.352 1008.12 897.56 1007.18C890.959 1006.6 884.365 1005.51 877.792 1004.69C855.883 1001.93 827.471 1005.14 808.025 993.393C798.791 983.982 798.791 973.286 798.791 957.089L798.791 957.089C798.791 940.892 805.124 921.158 823.432 901.483C832.569 890.201 834.871 891.349 847.105 892.89C858.903 894.375 887.695 893.653 899.694 896.139Z" fill="#FFEACB"/>
          <path d="M294 691.653C294.601 685.506 295.234 679.102 295.9 672.423L487.369 719.989L678.839 691.653L765 658L750.64 691.653C740.181 714.089 707.349 761.844 659.692 773.382C600.121 787.805 568.744 792.613 473.009 782.998C396.422 775.305 321.758 718.896 294 691.653Z" fill="#A95FAC"/>
          <path d="M382.161 374.478C436.984 340.91 489.838 331.86 552.521 328.939C594.826 335.369 649.439 336.419 683.703 365.978C726.111 402.564 771.8 445.287 787.195 501.968C795.459 532.393 798.894 579.868 790.982 610.303C782.306 643.674 764.897 664.026 741.863 688.045C690.059 742.063 607.792 760.156 535.298 763.534C450.715 767.475 385.357 738.777 315.349 695.301C284.569 676.187 272.223 632.363 264.236 600.276C257.714 574.075 262.598 541.381 270.527 515.949C278.77 489.507 291.539 472.579 304.904 449.493C319.759 423.834 356.693 390.072 382.161 374.478Z" fill="#C16ADF"/>
          <path d="M478.383 385.623C501.037 383.641 544.421 386.933 544.421 386.933L579.902 390.255C579.902 390.255 612.952 406.708 628.173 411.244C663.744 421.843 689.934 456.845 708.079 485.67C735.728 529.593 737.101 589.195 707.411 632.024C677.258 675.519 607.927 691.511 557.011 690.501C519.431 689.755 483.54 685.016 447.218 676.145C411.776 667.488 379.535 661.355 350.582 638.831C306.603 604.619 293.081 540.108 317.055 491.117C337.263 449.819 376.686 423.213 415.045 400.87C432.288 390.826 458.525 387.361 478.383 385.623Z" fill="#FDFDFD"/>
          <path d="M370.785 511.962C389.067 478.474 423.553 418.914 467.705 424.358C505.896 418.08 497.444 496.13 492.893 515.884C484.001 554.472 450.3 653.143 390.817 617.289C361.61 599.685 356.242 538.6 370.785 511.962Z" fill="#FF55B1"/>
          <path d="M528.881 482.255C534.441 460.842 554.589 449.919 574.795 444.514C656.39 422.69 665.117 644 579.834 644C537.513 644 525.197 614.773 517.367 581.267C512.11 558.768 523.322 503.667 528.881 482.255Z" fill="#FF55B1"/>
          <path d="M1018.73 722.986C1083.29 718.966 1096.04 720.37 1139.11 727.74C1165.29 728.774 1232.96 760.395 1250.66 778.679C1293.91 823.37 1309.94 890.657 1311.3 951.071C1313.03 1028.07 1287.32 1106.74 1241.93 1167.76C1193.5 1232.86 1105.94 1221.7 1035.62 1217.38C1001.76 1215.3 959.923 1203.9 931.016 1185.5C901.664 1166.82 888.295 1139.76 873.045 1108.89L872.748 1108.29C836.557 1035.04 827.729 922.258 868.528 847.579C887.45 812.944 908.616 776.094 940.843 752.825C965.72 734.864 990.003 730.802 1018.73 722.986Z" fill="#7CBBF5"/>
          <path d="M1183.82 948.988C1185.56 945.854 1200.88 926 1210.8 926C1221.09 929.398 1223.95 936.824 1226.76 946.216C1234.3 971.416 1231.46 1004.7 1220.84 1028.38C1210.76 1050.85 1168.31 1079.23 1163.74 1038C1160.34 1007.3 1168.92 975.695 1183.82 948.988Z" fill="#FFEACB"/>
          <path d="M1256.8 845.094C1248.79 831.492 1248.54 826.724 1240.1 816.728C1236.64 812.639 1229.11 809.039 1226.09 810.232C1225.4 810.502 1230.85 818.976 1231.38 820.023C1236.96 831.039 1239.93 844.246 1243.07 856.257C1254.55 900.298 1261.81 942.686 1261.81 988.387C1261.81 1035.85 1251.22 1079.29 1226.37 1120.15C1219.42 1131.56 1212.29 1142.78 1205.77 1154.46C1202.35 1160.6 1190 1172.76 1190 1179.99C1190 1180.33 1207.99 1169.25 1210.04 1166.72L1210.93 1165.63C1223.31 1150.36 1235.05 1135.89 1246.03 1118.87C1261.46 1094.95 1269.17 1064.16 1277.67 1037.34C1288.63 1002.75 1289.82 965.781 1281.84 930.374C1277.65 911.741 1272.34 892.978 1267.65 874.466C1265.21 864.84 1261.88 853.728 1256.8 845.094Z" fill="#3B97EC"/>
          <path d="M1142.99 762.899C1171.74 777.547 1190.09 793.629 1197 801.374C1180.26 801.374 1168.15 809.372 1152.31 817.942C1114.87 838.201 1100.28 870.155 1083.28 907.367L1082.89 908.237C1069.65 948.305 1067.72 966.303 1063.76 980.307C1056.06 1021.6 1060.47 1063.7 1063.76 1084.52C1070.22 1121.88 1068.96 1113.3 1071.11 1127.69C1073.26 1142.08 1085.49 1169 1090.28 1175.65C1095.07 1182.3 1039.27 1180.53 999.235 1175.65C959.197 1170.78 957.992 1163 932.151 1148.01C922.987 1144.98 909.603 1111.53 903.4 1103.71C889.998 1061.01 880.693 1006.38 882.15 943.858C886.378 906.296 890.782 870.409 910.564 836.995C923.885 814.494 941.409 771.525 968.219 762.899C997.626 751.792 1051.94 748.768 1051.94 748.768C1084.76 746.627 1114.24 748.252 1142.99 762.899Z" fill="#A2D2FF"/>
        </svg>

        </div>

      </div>

      {/* ------------------------ */}

      <div className='box row justify-content-center align-items-center m-auto'>

        {/* Controls  */}
        <div className='controls col-3'>

          <button className={`button btn col-12 m-1`}
                  onClick = {()=> setIsListening(latest => !latest)} >
                    
            <svg className='think' viewBox="0 0 85 126" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M65.41 63.486C65.41 74.417 56.5549 83.285 45.6189 83.285H38.408C27.487 83.285 18.627 74.417 18.627 63.486V19.789C18.626 8.859 27.486 0 38.408 0H45.6189C56.5549 0 65.41 8.859 65.41 19.789V63.486Z" fill="#232323"/>
              <path d="M77.963 37.5371C74.609 37.5371 71.891 40.2561 71.891 43.6091V68.8731C71.889 71.6331 71.264 74.2311 70.102 76.6561C68.363 80.2831 65.368 83.5121 61.46 85.8331C57.556 88.1531 52.772 89.5491 47.553 89.5481H36.475C29.53 89.5521 23.342 87.0621 18.989 83.2291C16.812 81.3141 15.098 79.0751 13.934 76.6551C12.771 74.2311 12.146 71.6331 12.144 68.8741V43.6091C12.144 40.2551 9.425 37.5371 6.072 37.5371C2.719 37.5371 2.78054e-06 40.2561 2.78054e-06 43.6091V68.8731C-0.00199722 73.5021 1.075 77.9411 2.99 81.9181C5.865 87.8911 10.579 92.8271 16.377 96.2731C21.609 99.3811 27.754 101.275 34.323 101.62V120.495C34.323 123.539 36.793 126 39.841 126H44.201C47.237 126 49.721 123.539 49.721 120.495V101.629C58.722 101.153 66.912 97.7631 73.074 92.3471C76.398 89.4221 79.137 85.8971 81.05 81.9161C82.964 77.9391 84.039 73.5011 84.037 68.8731V43.6091C84.036 40.2551 81.317 37.5371 77.963 37.5371Z" fill="#232323"/>
            </svg>

            {/* {!isListening ? 'Listen' : 'Stop'}  */}
          </button>

          <button className={`button btn col-12 m-1`}
                        onClick={sendPrompt} >

            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M16 0C13.644 0 11.455 1.01498 9.93 2.80102C8.949 2.27602 7.85902 2.00002 6.75 2.00002C3.02798 2.00002 0 5.028 0 8.75002C0 12.472 3.02798 15.5 6.75 15.5H6.80798C7.41398 17.01 8.853 18 10.5 18C12.024 18 13.407 17.119 14.074 15.766C14.703 15.921 15.349 16 16 16C20.411 16 24 12.411 24 7.99997C24 3.58894 20.411 0 16 0ZM15.999 15C15.296 15 14.601 14.896 13.932 14.689C13.678 14.61 13.404 14.748 13.314 15C12.89 16.196 11.759 17 10.5 17C9.16598 17 8.01502 16.131 7.63598 14.839C7.57298 14.625 7.30598 14.485 7.07798 14.485H7.03997C6.94298 14.492 6.84698 14.499 6.74897 14.499C3.57797 14.499 0.998953 11.919 0.998953 8.74903C0.998953 5.57902 3.57802 2.99902 6.74902 2.99902C7.818 2.99902 8.86702 3.30103 9.783 3.87202C10.001 4.008 10.287 3.957 10.444 3.75202C11.785 2.00302 13.81 1.00003 15.999 1.00003C19.858 1.00003 22.999 4.14005 22.999 8.00002C22.999 11.86 19.858 15 15.999 15Z" fill="black"/>
              <path d="M7.00002 18C5.897 18 5 18.897 5 20C5 21.103 5.897 22 7.00002 22C8.10303 22 9.00003 21.103 9.00003 20C9.00003 18.897 8.10303 18 7.00002 18ZM7.00002 21C6.44802 21 6.00003 20.551 6.00003 20C6.00003 19.449 6.44802 19 7.00002 19C7.55202 19 8 19.449 8 20C8 20.551 7.55202 21 7.00002 21Z" fill="black"/>
              <path d="M2.5 21C1.67298 21 1 21.673 1 22.5C1 23.327 1.67298 24 2.5 24C3.32702 24 4 23.327 4 22.5C4 21.673 3.32702 21 2.5 21ZM2.5 23C2.22498 23 1.99998 22.776 1.99998 22.5C1.99998 22.224 2.22498 22 2.5 22C2.77502 22 3.00002 22.224 3.00002 22.5C3.00002 22.776 2.77502 23 2.5 23Z" fill="black"/>
            </svg>

          </button>

          <button className={`button btn col-12 m-1`}
                        onClick={undo} >

            <span className=''>Undo</span>
          </button>

          <button className={`button btn col-12 m-1`}
                        onClick={redo} >

            <span className=''>Redo</span>
          </button>

        </div>

        {/* Text Box */}
        <div className='box-bg text-box col-12 '>

          <textarea
            className='text' 
            type="text" 
            name='text' 
            onChange={handleTextChange} 
            value={ text + '' + transcript }>
          </textarea>

        </div>
        
      </div>

    </div>
  )
}
