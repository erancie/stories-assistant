//shout out to Darwin Tech (https://www.youtube.com/watch?v=U2g--_TDYj4)
//and Mohan Raj for inspo with this component (https://www.section.io/engineering-education/speech-recognition-in-javascript/)
import React, { useEffect, useState } from 'react'
import {} from 'dotenv/config';
import axios from 'axios';

//Speech Rec.
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
const recognition = new SpeechRecognition()
recognition.continuous = true
recognition.interimResults = true
recognition.lang = 'en-US'

export default function App() {
  //state
  const [isListening, setIsListening ] = useState(false)
  const [text, setText ] = useState('')
  const [transcript, setTranscript ] = useState('')

  //effects
  useEffect(()=>{
    //recognition
    recognition.onstart = () => console.log('recognition.onstart()')
    //onresult sets transcript while listening - before onend  
    recognition.onresult = event => { 
      const transcript = Array.from(event.results)
      .map(result => result[0])
      .map(result => result.transcript)
      .join('')
      setTranscript(transcript);
      recognition.onerror = event => console.log(event.error) 
    }
  }, [])

  useEffect(()=>{
    const handleListen = () => {
      if(isListening){                                   
        recognition.start(); 
        recognition.onend = () => {                       
          recognition.start(); 
        }
      }else {
        recognition.stop();  
        //onend when stopped adds transcript from listening to text
        recognition.onend =()=> { 
          setText(currText => currText +' '+ transcript)
          setTranscript('')
        }
      }
    }
    handleListen(); console.log('handleListen()');
  }, [isListening])

  async function sendPrompt() {
    try {
      const requestBody = { text }; 
      let postURL ='https://us-central1-quickstories.cloudfunctions.net/chatgpt' 
      if (process.env.NODE_ENV === 'development') {  //functions emulator endpoint with client development
       postURL ='http://127.0.0.1:5001/quickstories/us-central1/chatgpt' 
      }
      // console.log('process.env.NODE_ENV-------'+process.env.NODE_ENV) 
      // console.log('postURL:' + postURL)
      let response = await axios.post( postURL, requestBody );
      const result = response.data.result;
      // const engine = response.data.engine;
      // console.log('engine: '+engine)
      setText(prev=>prev+' '+result); 
    } catch (error) {
      console.log(error)
    }
  }

  const handleTextChange = e => setText(e.target.value)

  return (
    <div className="App">

      <div className='header row mx-2 my-4'>
        
        <div className=' col-8 '>
          <h1 className='title '>
            <span className='clever'><span className='c'>C</span>lever</span> 
            <span className='clive'> <span className='c2'>C</span>live</span>
          </h1>
          <h1 className='sub-title'>Speak or Type to have Clive complete your sentence.</h1>
        </div>

        <div className='col-4 '>

          <svg  viewBox="0 0 1313 1221" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M76.4171 757.945C112.226 734.373 141.291 719.379 194.466 711.282C227.267 715.241 254.444 721.855 283.963 736.595C305.477 747.339 329.94 774.894 345.117 793.701C375.873 831.812 388.345 875.943 400.248 922.407C413.157 972.793 419.518 1024.91 409.358 1076.61C403.237 1107.76 392.28 1126.76 373.155 1150.87C332.158 1202.57 253.776 1207.38 192.633 1205.58C139.329 1204.01 106.419 1178.25 71.072 1141.43C51.0201 1120.54 33.0435 1078.43 23.8626 1051.5C9.56386 1009.57 -3.33283 966.337 2.08163 921.468C9.58806 859.262 19.9155 795.138 76.4171 757.945Z" fill="#7CBBF5"/>
            <path d="M161.106 752.577C162.375 751.431 163.677 750.333 165.012 749.285C164.213 750.495 162.857 751.585 161.106 752.577C119.491 790.156 112.878 879.371 115.897 929.829C119.883 996.454 164.602 1070.92 181.924 1094.62C199.247 1118.32 237.936 1144.07 237.936 1144.07C237.936 1144.07 248.092 1153.15 263.6 1163.77C239.802 1180.5 184.003 1164.72 159.227 1156.89C53.517 1123.51 30.5023 958.105 30.5023 958.105C30.5023 958.105 21.1339 836.358 58.3636 807.146C75.3385 793.827 104.132 770.391 124.776 763.005C132.672 760.181 152.106 757.675 161.106 752.577Z" fill="#A2D2FF"/>
            <path d="M314.957 838.821C304.353 828.339 234.948 773.313 235.219 780.259C272.945 820.681 279.749 824.212 286.438 835.379C300.875 859.482 316.188 879.254 330.785 908.96C349.685 950.36 363.675 983.058 361.115 1017.29C360.848 1045.62 357.377 1073.43 353.954 1101.8C352.448 1114.28 346.802 1140.82 361.952 1115.45C391.723 1065.59 396.574 998.598 376.242 943.738C358.569 908.505 341.539 859.952 314.957 838.821Z" fill="#3B97EC"/>
            <path d="M702.157 182.568C695.904 190.422 611.399 298.508 641.436 298.508C667.145 318.481 718.233 326.633 747.083 340.508C754.632 344.139 778.774 364.442 788.235 355.937C792.667 351.952 792.437 342.464 794.602 337.328C803.09 317.193 807.784 290.777 813.705 269.488L814.276 267.743C825.97 232.026 840.951 186.272 866.294 137.812C869 120.347 951.415 0.986957 927.728 0.365854C917.354 -1.93669 899.976 7.25934 894.358 10.377C867.199 25.4481 846.824 44.7645 822.902 64.7902C779.482 101.138 737.62 138.028 702.157 182.568Z" fill="#B0CAE2"/>
            <path d="M866.294 137.587C869 120.103 951.415 0.621738 927.728 0C916.605 16.6386 891.575 52.8306 880.442 64.4903C869.308 76.15 837.443 136.103 822.902 164.623C804.728 201.568 765.719 269.397 765.719 284.109C765.719 284.109 685.451 253.839 656.575 245.873C639.247 272.989 626.866 298.448 641.436 298.448C667.145 318.44 718.233 326.601 747.083 340.49C754.632 344.124 778.774 364.448 788.235 355.934C792.667 351.946 792.437 342.448 794.602 337.307C803.09 317.151 807.784 290.709 813.705 269.397L814.276 267.65C825.97 231.897 840.951 186.096 866.294 137.587Z" fill="#7CBBF5"/>
            <path d="M358.951 873.161C359.393 873.063 359.815 872.978 360.218 872.907C368.956 871.227 379.83 870.658 382.621 877.201C392.565 900.517 402.59 923.657 406.728 949.256C408.012 957.2 412.863 971.686 402.637 975.265C396.384 977.454 389.926 979.173 383.594 981.12C362.486 987.609 337.906 1002.21 315.349 999.496C303.063 994.712 298.667 984.961 292.011 970.195L292.011 970.195C285.354 955.429 283.018 934.835 291.623 909.375C295.316 895.335 297.886 895.435 309.672 891.812C321.039 888.317 346.989 875.826 358.951 873.161Z" fill="#FFEACB"/>
            <path d="M488.174 303.827C504.447 291.594 526.101 277.963 588.546 260.712C650.99 243.46 681.175 262.696 719.722 282.013C810.273 327.393 873.144 409.409 919.928 499.585C954.674 566.558 966.838 646.465 981.53 720.097C992.992 777.539 1000.19 865.425 974.93 920.518C923.016 1033.77 787.945 1096.93 666.92 1096.93C589.621 1096.93 512.107 1115.04 440.557 1074.88C380.428 1041.13 329.06 995.8 312.464 926.889C283.962 834.282 280.265 840.147 296.991 672.7C296.561 653.4 316.858 570.858 340.007 499.585C357.727 445.03 406.921 372.878 430.819 351.732C454.717 330.587 471.902 316.059 488.174 303.827Z" fill="#D17DEF"/>
            <path d="M666.452 1096.93C589.041 1096.93 511.416 1115.04 439.763 1074.88C411.297 1058.92 384.792 1040.38 363 1017.98C410.865 1035.43 519.996 1068.4 573.605 1060.74C640.616 1051.15 894.299 979.874 894.299 926.889C894.299 873.904 946.95 687.072 879.94 562.517C812.929 437.963 774.637 363.965 707.626 322.989C654.018 290.209 589.402 282.013 563.795 282.013L511.381 288.585C527.166 280.294 550.062 271.168 587.964 260.712C650.498 243.46 680.727 262.696 719.329 282.013C810.011 327.393 872.973 409.409 919.824 499.585C954.621 566.558 966.801 646.465 981.515 720.097C992.993 777.539 1000.2 865.425 974.905 920.518C922.917 1033.77 787.651 1096.93 666.452 1096.93Z" fill="#B861D7"/>
            <path d="M900.458 895.635C900.901 895.727 901.321 895.823 901.717 895.924C910.374 897.983 920.521 901.934 920.376 909.045C919.86 934.388 919.489 959.604 912.741 984.642C910.646 992.412 909.115 1007.61 898.323 1006.67C891.723 1006.1 885.128 1005.01 878.555 1004.18C856.646 1001.42 828.235 1004.64 808.789 992.889C799.554 983.478 799.554 972.782 799.554 956.586L799.554 956.585C799.554 940.388 805.887 920.654 824.196 900.979C833.333 889.697 835.634 890.845 847.868 892.386C859.666 893.871 888.458 893.149 900.458 895.635Z" fill="#FFEACB"/>
            <path d="M295 691.394C295.6 685.295 296.232 678.94 296.896 672.312L487.959 719.512L679.022 691.394L765 658L750.67 691.394C740.234 713.657 707.471 761.045 659.915 772.495C600.471 786.807 569.161 791.577 473.629 782.036C397.204 774.403 322.699 718.428 295 691.394Z" fill="#C16ADF"/>
            <path d="M382.924 373.964C437.747 340.397 490.602 331.346 553.285 328.425C595.589 334.855 650.203 335.905 684.467 365.465C726.875 402.05 772.563 444.773 787.959 501.454C796.223 531.879 799.657 579.355 791.745 609.789C783.07 643.16 765.66 663.512 742.626 687.531C690.823 741.549 608.555 759.642 536.061 763.02C451.479 766.961 386.121 738.263 316.112 694.788C285.332 675.673 272.986 631.849 264.999 599.762C258.477 573.562 263.362 540.867 271.29 515.436C279.533 488.993 292.303 472.065 305.668 448.98C320.522 423.321 357.456 389.558 382.924 373.964Z" fill="#A85EA9"/>
            <path d="M479.146 385.119C501.8 383.137 545.184 386.429 545.184 386.429L580.665 389.751C580.665 389.751 613.715 406.204 628.937 410.74C664.507 421.339 690.697 456.341 708.842 485.167C736.491 529.089 737.864 588.691 708.174 631.52C678.021 675.015 608.691 691.007 557.774 689.997C520.194 689.251 484.303 684.513 447.981 675.641C412.539 666.984 380.298 660.851 351.345 638.327C307.366 604.115 293.844 539.604 317.818 490.613C338.026 449.316 377.449 422.709 415.808 400.366C433.051 390.323 459.289 386.857 479.146 385.119Z" fill="#FDFDFD"/>
            <path d="M1019.49 722.474C1084.05 718.454 1096.8 719.859 1139.88 727.228C1166.05 728.262 1233.73 759.884 1251.42 778.168C1294.68 822.858 1310.7 890.146 1312.06 950.559C1313.79 1027.56 1288.09 1106.23 1242.69 1167.25C1194.26 1232.35 1106.7 1221.19 1036.38 1216.86C1002.52 1214.78 960.686 1203.39 931.779 1184.99C902.427 1166.31 889.058 1139.25 873.808 1108.38L873.511 1107.78C837.32 1034.52 828.491 921.746 869.291 847.068C888.213 812.432 909.379 775.582 941.606 752.314C966.483 734.352 990.766 730.29 1019.49 722.474Z" fill="#7CBBF5"/>
            <path d="M1184.12 947.16C1185.89 944.004 1201.44 924 1211.5 924C1221.94 927.424 1224.85 934.905 1227.7 944.368C1235.35 969.758 1232.47 1003.3 1221.69 1027.15C1211.46 1049.79 1168.39 1078.38 1163.75 1036.85C1160.3 1005.91 1169.01 974.069 1184.12 947.16Z" fill="#FFEACB"/>
            <path d="M1258.11 843.284C1250.18 829.609 1249.94 824.815 1241.58 814.765C1238.16 810.653 1230.71 807.033 1227.72 808.233C1227.04 808.504 1232.42 817.024 1232.95 818.077C1238.48 829.152 1241.42 842.431 1244.52 854.507C1255.88 898.786 1263.06 941.403 1263.06 987.351C1263.06 1035.07 1252.59 1078.75 1227.99 1119.83C1221.12 1131.3 1214.06 1142.58 1207.61 1154.33C1204.22 1160.5 1192 1172.72 1192 1179.99C1192 1180.34 1209.8 1169.2 1211.83 1166.65L1212.71 1165.55C1224.97 1150.2 1236.59 1135.65 1247.46 1118.54C1262.73 1094.49 1270.36 1063.53 1278.77 1036.57C1289.61 1001.79 1290.79 964.623 1282.9 929.025C1278.74 910.291 1273.49 891.426 1268.85 872.815C1266.43 863.137 1263.14 851.964 1258.11 843.284Z" fill="#3B97EC"/>
            <path d="M1143.16 762.865C1171.82 777.478 1190.11 793.524 1197 801.25C1180.31 801.25 1168.24 809.23 1152.45 817.78C1115.13 837.992 1100.58 869.872 1083.64 906.998L1083.25 907.866C1070.05 947.841 1068.13 965.797 1064.18 979.77C1056.51 1020.96 1060.9 1062.97 1064.18 1083.74C1070.63 1121.02 1069.37 1112.45 1071.51 1126.81C1073.66 1141.17 1085.84 1168.03 1090.62 1174.66C1095.39 1181.3 1039.77 1179.52 999.863 1174.66C959.952 1169.8 958.751 1162.04 932.992 1147.09C923.857 1144.06 910.515 1110.69 904.332 1102.88C890.973 1060.29 881.697 1005.78 883.15 943.405C887.364 905.93 891.754 870.126 911.473 836.789C924.752 814.34 942.221 771.47 968.945 762.865C998.259 751.783 1052.41 748.766 1052.41 748.766C1085.12 746.63 1114.5 748.251 1143.16 762.865Z" fill="#A2D2FF"/>
            <path d="M534 594.877C534.254 594.624 534.506 594.369 534.757 594.113C534.535 591.758 534 587.356 534 581.8C536.02 567.378 540.361 560.155 545.373 551.492C565.016 517.537 601.758 500.776 639.365 517.614C659.967 526.838 671.001 552.589 673.635 573.26C673.903 575.364 674.606 591.849 672.834 589.573C669.255 584.978 666.393 579.402 662.763 574.711C648.459 556.222 617.295 551.408 595.676 554.444C577.86 556.946 563.378 565.965 550.133 577.963C544.614 582.963 539.96 588.805 534.757 594.113C534.957 596.22 534.906 596.688 534 594.877Z" fill="#FF55B1"/>
            <path d="M481.87 558.485C482.106 560.574 480.488 565.984 477.494 567C477.494 561.825 472.28 554.658 469.44 549.307C465.77 540.339 457.648 531.645 449.552 526.544C432.105 515.548 414.52 506.394 393.171 508.154C382.115 509.066 371.583 510.977 360.854 513.721C356.742 514.773 351.997 518.207 354.888 512.429C361.472 499.264 368.549 484.17 380.642 475.054C396.2 463.326 417.94 462.731 436.128 468.792C455.14 475.126 466.712 490.198 474.114 507.956C479.244 520.265 481.87 545.407 481.87 546.971C481.87 548.535 482.163 554.361 481.87 558.485Z" fill="#FF55B1"/>
          </svg>
          
        </div>

      </div>

      <div className='box row justify-content-center align-items-center m-auto'>

        <div className='box-bg text-box col-12 '>

          <div className='listen-buttons-bg pt-3 m-auto row '>
            <div className='listen-buttons m-auto row align-items-center justify-content-center'>
              <div className='mb-2 col-12 col-lg-6 '>
                <button className={`button btn px-5`}
                        onClick = {()=> setIsListening(latest => !latest)} >
                  {!isListening ? 'Listen' : 'Stop'} 
                </button>
              </div>
              <div className='listening mb-2 col-12 col-lg-6 '>
                {isListening ? <i style={{color: 'rgb(170, 177, 254)'}}>Listening</i> : <i>Not Listening</i>}
              </div>
            </div>
          </div>

          <div className='interim-text px-2 m-auto' >
            {isListening ? <>{transcript}</> : null}
          </div>

          <textarea
            className='text' 
            type="text" 
            name='text' 
            onChange={handleTextChange} 
            value={text}>
          </textarea>

        </div>
        
        <div className='request-box col-10 col-lg-2 row'>
          <button className={`button btn col-6 col-lg-12 btn-lg my-3`}
                      onClick={sendPrompt} >
            <span className='complete'>Complete</span>
            <svg className='arrow-down' viewBox="0 0 111 64"  xmlns="http://www.w3.org/2000/svg">
              <path d="M70.3108 38.7437L53.0209 48.8676C52.3736 49.2493 51.8982 49.9063 51.7702 50.7135C51.5391 52.173 52.534 53.576 53.9925 53.8411L107.499 63.6031L107.933 63.6434C109.409 63.6698 110.602 62.4857 110.594 61.0049L110.324 7.74414C110.311 6.983 109.987 6.22221 109.363 5.6809C108.234 4.70735 106.55 4.82067 105.607 5.93164L94.5697 18.9379C91.9781 16.4117 88.8184 13.9286 85.237 11.643C75.8954 5.67494 63.5404 0.970783 50.6487 0.305464C37.63 -0.367087 24.0668 3.05459 12.4624 13.3808C8.23308 17.1387 4.27422 21.8145 0.715106 27.5326C0.0854835 28.3931 0.0212279 29.6027 0.64341 30.5742C1.45171 31.8354 3.11115 32.2228 4.34587 31.4387C21.0039 20.909 34.6722 19.7105 45.8103 22.9346C55.7666 25.815 63.862 32.2537 70.3108 38.7437Z" />
            </svg>
          </button>
        </div>
        
      </div>

    </div>
  )
}
